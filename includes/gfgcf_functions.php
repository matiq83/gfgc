<?php// Add a custom field button to the advanced to the field editoradd_filter( "gform_add_field_buttons", "wp_add_gfgcf_field" );function wp_add_gfgcf_field( $field_groups ) {	foreach( $field_groups as &$group ){		if( $group["name"] == "advanced_fields" ){ // to add to the Advanced Fields			$group["fields"][] = array(				"class"=>"button",				"value" => __(GFGCF_PLUGIN_NAME, "gravityforms"),				"onclick" => "StartAddField('gfgcf');"			);			break;		}	}	return $field_groups;}// Adds title to GF custom fieldadd_filter( "gform_field_type_title" , "wp_gfgcf_title" );function wp_gfgcf_title( $type ) {	if ( $type == "gfgcf" )	return __( GFGCF_PLUGIN_NAME , "gravityforms" );}// Now we execute some javascript technicalitites for the field to load correctlyadd_action( "gform_editor_js", "wp_gform_editor_js" );function wp_gform_editor_js(){?>	<script type="text/javascript">		jQuery(document).ready(function($) {			fieldSettings["gfgcf"] = ".label_setting, .description_setting, .admin_label_setting, .error_message_setting, .css_class_setting, .visibility_setting, .gfgcf_setting, .conditional_logic_field_setting"; //this will show all the fields of the Paragraph Text field minus a couple that I didn"t want to appear.			//binding to the load field settings event to initialize the checkbox			$(document).bind("gform_load_field_settings", function(event, field, form){				jQuery("#field_gfgcf_client_id").val(field["gfgcf_client_id"]);				$("#field_gfgcf_client_id_value").val(field["gfgcf_client_id"]);				jQuery("#field_gfgcf_service_account_name").val(field["gfgcf_service_account_name"]);				$("#field_gfgcf_service_account_name_value").val(field["gfgcf_service_account_name"]);				jQuery("#field_gfgcf_key_file_location").val(field["gfgcf_key_file_location"]);				$("#field_gfgcf_key_file_location").val(field["gfgcf_key_file_location"]);				jQuery("#field_gfgcf_calendarId").val(field["gfgcf_calendarId"]);				$("#field_gfgcf_calendarId_value").val(field["gfgcf_calendarId"]);				jQuery("#field_gfgcf_app_name").val(field["gfgcf_app_name"]);				$("#field_gfgcf_app_name_value").val(field["gfgcf_app_name"]);				jQuery("#field_gfgcf_time_offset").val(field["gfgcf_time_offset"]);				$("#field_gfgcf_time_offset_value").val(field["gfgcf_time_offset"]);							});		});    </script><?php}// Add a custom setting to the tos advanced fieldadd_action( "gform_field_advanced_settings" , "wp_gfgcf_settings" , 10, 2 );function wp_gfgcf_settings( $position, $form_id ){	// Create settings on position 50 (right after Field Label)	if( $position == 50 ){	?>        <li class="gfgcf_setting field_setting">        <label for="field_gfgcf_client_id" class="inline">        <?php _e("Service Client ID", "gravityforms"); ?>        <?php gform_tooltip("field_gfgcf_client_id"); ?>        </label>        <input type="text" id="field_gfgcf_client_id" name="field_gfgcf_client_id" class="fieldwidth-2" onkeyup="SetFieldProperty('gfgcf_client_id', this.value);" onblur="SetFieldProperty('gfgcf_client_id', this.value);"/>        </li>                <li class="gfgcf_setting field_setting">        <label for="field_gfgcf_service_account_name" class="inline">        <?php _e("Service Account Name (Email address)", "gravityforms"); ?>        <?php gform_tooltip("field_gfgcf_service_account_name"); ?>        </label>        <input type="text" id="field_gfgcf_service_account_name" name="field_gfgcf_service_account_name" class="fieldwidth-2" onkeyup="SetFieldProperty('gfgcf_service_account_name', this.value);" onblur="SetFieldProperty('gfgcf_service_account_name', this.value);"/>        </li>                <li class="gfgcf_setting field_setting">        <label for="field_gfgcf_key_file_location" class="inline">        <?php _e("Service Private Key Path", "gravityforms"); ?>        <?php gform_tooltip("field_gfgcf_key_file_location"); ?>        </label>        <input type="text" id="field_gfgcf_key_file_location" name="field_gfgcf_key_file_location" class="fieldwidth-2" onkeyup="SetFieldProperty('gfgcf_key_file_location', this.value);" onblur="SetFieldProperty('gfgcf_key_file_location', this.value);"/>        </li>                <li class="gfgcf_setting field_setting">        <label for="field_gfgcf_calendarId" class="inline">        <?php _e("Calendar Id", "gravityforms"); ?>        <?php gform_tooltip("field_gfgcf_calendarId"); ?>        </label>        <input type="text" id="field_gfgcf_calendarId" name="field_gfgcf_calendarId" class="fieldwidth-2" onkeyup="SetFieldProperty('gfgcf_calendarId', this.value);" onblur="SetFieldProperty('gfgcf_calendarId', this.value);"/>        </li>                <li class="gfgcf_setting field_setting">        <label for="field_gfgcf_time_offset" class="inline">        <?php _e("Timezone offset", "gravityforms"); ?>        </label>        <select class="fieldwidth-2" name="field_gfgcf_time_offset" id="field_gfgcf_time_offset" onchange="SetFieldProperty('gfgcf_time_offset', this.value);">        	<option value="">None</option>            <option value="+01:00">+01:00</option>            <option value="+02:00">+02:00</option>            <option value="+03:00">+03:00</option>            <option value="+04:00">+04:00</option>            <option value="+05:00">+05:00</option>            <option value="+06:00">+06:00</option>            <option value="+07:00">+07:00</option>            <option value="+08:00">+08:00</option>            <option value="+09:00">+09:00</option>            <option value="+10:00">+10:00</option>            <option value="+11:00">+11:00</option>            <option value="+12:00">+12:00</option>            <option value="-01:00">-01:00</option>            <option value="-02:00">-02:00</option>            <option value="-03:00">-03:00</option>            <option value="-04:00">-04:00</option>            <option value="-05:00">-05:00</option>            <option value="-06:00">-06:00</option>            <option value="-07:00">-07:00</option>            <option value="-08:00">-08:00</option>            <option value="-09:00">-09:00</option>            <option value="-10:00">-10:00</option>            <option value="-11:00">-11:00</option>            <option value="-12:00">-12:00</option>            <option value="-13:00">-13:00</option>        </select>        </li>                <li class="gfgcf_setting field_setting">        <label for="field_gfgcf_app_name" class="inline">        <?php _e("Applications Name (Optional)", "gravityforms"); ?>        </label>        <input type="text" id="field_gfgcf_app_name" name="field_gfgcf_app_name" class="fieldwidth-2" onkeyup="SetFieldProperty('gfgcf_app_name', this.value);" onblur="SetFieldProperty('gfgcf_app_name', this.value);" />        </li>	<?php	}}//Filter to add a new tooltipsadd_filter("gform_tooltips", "wp_add_gfgcf_tooltips");function wp_add_gfgcf_tooltips($tooltips){	$tooltips["field_gfgcf_client_id"] = "<h6>Your Service Account's Client ID</h6>You can get it by creating a new Service Account in the <a href='http://developers.google.com/console'>Google API console</a>.";    	$tooltips["field_gfgcf_service_account_name"] = "<h6>Your Service Account's Email address</h6>You can get it by creating a new Service Account in the <a href='http://developers.google.com/console'>Google API console</a>. It is the email address value provided as part of the service account (not your address!)";    	$tooltips["field_gfgcf_key_file_location"] = "<h6>Your Service Account's Private File Location</h6>You can get it by creating a new Service Account in the <a href='http://developers.google.com/console'>Google API console</a>. Be sure to store the key file somewhere you can get to it, provide here the full path of that private key file.";  	$tooltips["field_gfgcf_calendarId"] = "<h6>Calendar ID</h6>It is the Calendar Address that you want to access through this field.";	return $tooltips;}// Display google calnder date/time on the frontadd_filter("gform_field_input", "wp_gfgcf_field", 10, 5);function wp_gfgcf_field($input, $field, $value, $lead_id, $form_id){    if ( $field["type"] == "gfgcf" ) {		if(!is_admin()){			$input_name = $form_id ."_" . $field["id"];			$tabindex = GFCommon::get_tabindex();			$css = isset( $field['cssClass'] ) ? $field['cssClass'] : "";			$booked_entries = wp_gfgcf_get_google_calendar_entries($field['gfgcf_client_id'],$field['gfgcf_service_account_name'],$field['gfgcf_key_file_location'],$field['gfgcf_calendarId'],$field['gfgcf_app_name']);			return "<div class='ginput_container ".esc_attr( $css )."'>".wp_gfgcf_get_calendar_html($booked_entries,$input_name)."</div>";		}	}    return $input;}// Add a custom class to the field liadd_action("gform_field_css_class", "wp_gfgcf_custom_class", 10, 3);function wp_gfgcf_custom_class($classes, $field, $form){	if( $field["type"] == "gfgcf" ){		$classes .= " gform_gfgcf";	}	return $classes;}add_filter("gform_entry_post_save", 'gfgcf_update_calendar_field',9,2);function gfgcf_update_calendar_field($entry, $form) {    global $wpdb;	$lead_detail_table = RGFormsModel::get_lead_details_table_name();	$data = array();		$lead_id = $entry['id'];	$form_id = $entry['form_id'];				foreach($form['fields'] as $field){		if($field['type']=='gfgcf'){			$field_id = $field['id'];			$input_name = $form_id."_".$field_id."_daySlot";			$posted_field = str_replace("day-","",$_POST[$input_name]);			$posted_field_date_arr = explode("@",$posted_field);			$posted_field_date = $posted_field_date_arr[0];			$posted_field_time_arr = explode(" - ",$posted_field_date_arr[1]);			$posted_field_start_date_time = str_replace("@@","T",date("Y-m-d@@H:i:s",strtotime($posted_field_date." ".trim($posted_field_time_arr[0]))));			$posted_field_end_date_time = str_replace("@@","T",date("Y-m-d@@H:i:s",strtotime($posted_field_date." ".trim($posted_field_time_arr[1]))));						$client_id = $field['gfgcf_client_id'];			$service_account_name = $field['gfgcf_service_account_name'];			$key_file_location = $field['gfgcf_key_file_location'];			$calendar_id = $field['gfgcf_calendarId'];			$app_name = $field['gfgcf_app_name'];			$data['summary'] = $field['label'];			$data['start'] = $posted_field_start_date_time."".$field['gfgcf_time_offset'];			$data['end'] = $posted_field_end_date_time."".$field['gfgcf_time_offset'];						$entry[$field_id] = $posted_field;									$wpdb->query($wpdb->prepare("INSERT INTO $lead_detail_table(lead_id, form_id, field_number, value) VALUES(%d, %d, %d, %s)", $lead_id, $form_id, $field_id, $posted_field));						gfgcf_insert_google_calendar_event($data,$client_id,$service_account_name,$key_file_location,$calendar_id,$app_name);			unset($data);			unset($posted_field_date_arr);			unset($posted_field_time_arr);			$data = array();		}	}		return $entry;	    }function gfgcf_insert_google_calendar_event($data,$client_id,$service_account_name,$key_file_location,$calendar_id='primary',$app_name='Calendar'){	session_start();	if (!strlen($client_id) || !strlen($service_account_name) || !strlen($key_file_location)) {	  return 'Warning: You need to set Client ID, Email address and the location of the Key';	}	if(!is_array($data)){		return 'Warning: You should provide the calendar data';	}		$org_inc_path = ini_get("include_path");	ini_set("include_path", GFGCF_PLUGIN_PATH.'includes/');	require_once(GFGCF_PLUGIN_PATH.'includes/Google/Client.php');	require_once(GFGCF_PLUGIN_PATH.'includes/Google/Service/Calendar.php');		$client = new Google_Client();  	$client->setApplicationName($app_name);  	$client->setAccessType('online');	if (isset($_SESSION['service_token'])) {	  $client->setAccessToken($_SESSION['service_token']);	}	$key = file_get_contents($key_file_location);	$cred = new Google_Auth_AssertionCredentials(		$service_account_name,		array('https://www.googleapis.com/auth/calendar'),		$key	);	$client->setAssertionCredentials($cred);	if($client->getAuth()->isAccessTokenExpired()) {	  $client->getAuth()->refreshTokenWithAssertion($cred);	}	$_SESSION['service_token'] = $client->getAccessToken();		$service = new Google_Service_Calendar($client);		$event = new Google_Service_Calendar_Event();	$event->setSummary($data['summary']);	$start = new Google_Service_Calendar_EventDateTime();	$start->setDateTime($data['start']);	$event->setStart($start);	$end = new Google_Service_Calendar_EventDateTime();	$end->setDateTime($data['end']);	$event->setEnd($end);	$event = apply_filters('gfgcf_before_add_event', $event);	$createdEvent = $service->events->insert($calendar_id, $event);	do_action('gfgcf_after_add_event',$calendar_id, $createdEvent->getId());	ini_set("include_path", $org_inc_path);	return true;}function wp_gfgcf_get_calendar_html($booked_entries,$input_name){	//date_default_timezone_set('America/Chicago');	$oneDay = 60*60*24;	$oneWeek = $oneDay*7;		$today = getdate(time());		$todayStart = mktime(0,1,0, $today['mon'], $today['mday'], $today['year']);		$selectedDay = $todayStart;		$thisWeekStart = mktime(0,1,0, $today['mon'], $today['mday'], $today['year']);	$thisWeekEnd = $thisWeekStart + $oneWeek;		$schedule = array();	$firstDayId = false;	$html="";	$html.='<div class="gfgcf-date-head-main">';	//$html.='<div class="arrowLeft"><a href="" onclick="javascript: return toggleweeks'.$input_name.'();">←</a></div>';	$html.='<div class="gfgcf-date-head">';	$html.='<div class="stb-fullsize weekview firstweek firstweek'.$input_name.'">';		for($cd = 0; $cd < 12; $cd++){				$currentDay = $thisWeekStart + ($cd*$oneDay);		$dayId = 'day-'.date('Y-m-d', $currentDay);				if(!$firstDayId){			$firstDayId = $dayId;		}				$schedule[$dayId] = array();				for($bh = 0; $bh < 24; $bh++){			$available = ($currentDay+60*60*9-1+60*30*$bh) > time() - 60*60*2;						if($available){				$str_from = date('H:i:00', $currentDay+60*60*9-1+60*30*$bh);				$str_to = date('H:i:00', $currentDay+60*60*9-1+60*30*($bh+1));				$str_day = date('Y-m-d',$currentDay);				foreach($booked_entries as $entry){					if($entry['start']['date']==$str_day){						if($str_from==$entry['start']['time'] || $str_from==$entry['end']['time'] || $str_to==$entry['start']['time'] || $str_to==$entry['end']['time']){							$available = false;						}					}				}			}					  	$schedule[$dayId][] = array(				'available' => $available,				'caption' => date('h:ia', $currentDay+60*60*9-1+60*30*$bh).' - '.date('h:ia', $currentDay+60*60*9-1+60*30*($bh+1)),				);		}		$css_class = '';		if($selectedDay == $currentDay){			$css_class='active';		}		$html.='<div class="'.$css_class.'" onclick="gfgcfSelectDay_'.$input_name.'(\''.$dayId.'\',\''.$input_name.'\')" id="'.$dayId.'">';				if($currentDay == $todayStart){			$html.='Today<div class="smalltext">&nbsp;</div>';		}else{			$html.=date('l', $currentDay).'<div class="smalltext">'.date('M jS', $currentDay).'</div>';		}		$html.='</div>';		if($cd==5){			$html.='</div><div class="stb-fullsize weekview secondweek secondweek'.$input_name.'">';		}	}	$html.='</div>';	$html.='</div>';	$html.='<div class="arrowRight"><a href="" onclick="javascript: return toggleweeks'.$input_name.'();"><span>→</span><span>←</span></a></div>';	$html.='</div>';	$html.='<div id="schedulePlan" class="gfield_radio '.$input_name.'_schedulePlan"><div id="'.$input_name.'_first_col" class="first_col"></div><div id="'.$input_name.'_second_col" class="second_col"></div><div id="'.$input_name.'_third_col" class="third_col"></div></div>';	$html.='<script language="javascript">';	$html.='function toggleweeks'.$input_name.'(){jQuery( ".secondweek'.$input_name.'" ).toggle( "slide" );jQuery( ".firstweek'.$input_name.'" ).toggle( "slide" );return false;}';    $html.='var gfgcf_schedule_'.$input_name.' = '.json_encode($schedule).';var selectedDayId="'.$firstDayId.'";';	$html.='function gfgcfSelectDay_'.$input_name.'(dayId,input_name) { selectedDayId = dayId;jQuery("#field_"+input_name+" .weekview > div").removeClass("active"); jQuery("#field_"+input_name+" #"+dayId).addClass("active"); gfgcfDisplaySchedule_'.$input_name.'(dayId,input_name); }';	$html.='function gfgcfDisplaySchedule_'.$input_name.'(dayId,input_name) { jQuery("."+input_name+"_schedulePlan #'.$input_name.'_first_col").html("");jQuery("."+input_name+"_schedulePlan #'.$input_name.'_second_col").html("");jQuery("."+input_name+"_schedulePlan #'.$input_name.'_third_col").html(""); if(gfgcf_schedule_'.$input_name.'[dayId]) { var daySlotCount = 1; var any_availabel = false; jQuery.each(gfgcf_schedule_'.$input_name.'[dayId], function(idx, sp) { if(sp.available==true){any_availabel=true;}if(1){ var obj_col = "'.$input_name.'_first_col"; if(daySlotCount<=8){obj_col="'.$input_name.'_first_col";}else if(daySlotCount<=16){obj_col="'.$input_name.'_second_col";}else if(daySlotCount<=24){obj_col="'.$input_name.'_third_col";}var daySlotId = "daySlot-"+daySlotCount++;jQuery("."+input_name+"_schedulePlan #"+obj_col).append(\'<div class="available_\'+sp.available+\'"><input type="radio" name="\'+input_name+\'_daySlot" id="\'+input_name+\'_\'+selectedDayId+\'-\'+daySlotId+\'" value="\'+selectedDayId+\'@\'+sp.caption+\'"/> <label class="small" for="\'+daySlotId+\'">\'+sp.caption+\'</label></div>\');}});if(any_availabel==false){jQuery("."+input_name+"_schedulePlan #'.$input_name.'_first_col").html("");jQuery("."+input_name+"_schedulePlan #'.$input_name.'_second_col").html("");jQuery("."+input_name+"_schedulePlan #'.$input_name.'_third_col").html("");jQuery("."+input_name+"_schedulePlan #'.$input_name.'_first_col").append("Sorry, no time slots available for this day");}else{var objID = "."+input_name+"_schedulePlan .available_true";jQuery(objID).first().children("input").eq(0).click();}jQuery(".available_false input").attr("disabled",true);}else{jQuery("."+input_name+"_schedulePlan #'.$input_name.'_first_col").html("Sorry, no time slots available for this day");}}';	$html.='gfgcfDisplaySchedule_'.$input_name.'("'.$firstDayId.'","'.$input_name.'");jQuery(".available_false input").attr("disabled",true);';	$html.='</script>';		return $html;}//notasecret// Get data from google calendarfunction wp_gfgcf_get_google_calendar_entries($client_id,$service_account_name,$key_file_location,$calendar_id='primary',$app_name='Calendar'){	if (!strlen($client_id) || !strlen($service_account_name) || !strlen($key_file_location)) {	    return 'Warning: You need to set Client ID, Email address and the location of the Key';	}	session_start();	$org_inc_path = ini_get("include_path");	ini_set("include_path", GFGCF_PLUGIN_PATH.'includes/');	require_once(GFGCF_PLUGIN_PATH.'includes/Google/Client.php');	require_once(GFGCF_PLUGIN_PATH.'includes/Google/Service/Calendar.php');		$client = new Google_Client();  	$client->setApplicationName($app_name);  		$service = new Google_Service_Calendar($client);		if (isset($_SESSION['service_token'])) {	  $client->setAccessToken($_SESSION['service_token']);	}	$key = file_get_contents($key_file_location);	$cred = new Google_Auth_AssertionCredentials(		$service_account_name,		array('https://www.googleapis.com/auth/calendar'),		$key	);	$client->setAssertionCredentials($cred);	if($client->getAuth()->isAccessTokenExpired()) {	  $client->getAuth()->refreshTokenWithAssertion($cred);	}	$_SESSION['service_token'] = $client->getAccessToken();	$events = $service->events->listEvents($calendar_id);		$entries = array();	while(true) {		foreach ($events->getItems() as $event) {								$eventDateTime = $event->getModelData();			$eventStartDateTime = $eventDateTime['start']['dateTime'];			$eventEndDateTime = $eventDateTime['end']['dateTime'];						$arr_date = array();			$arr_date =	explode("T",$eventStartDateTime);			$arr_time = array();			$arr_time = explode("-",$arr_date[1]);						$arr_start_date_time = array('date'=>$arr_date[0],'time'=>$arr_time[0]);						$arr_date = array();			$arr_date =	explode("T",$eventEndDateTime);			$arr_time = array();			$arr_time = explode("-",$arr_date[1]);						$arr_end_date_time = array('date'=>$arr_date[0],'time'=>$arr_time[0]);						$entries[] = array('start'=>$arr_start_date_time,'end'=>$arr_end_date_time);		}				$pageToken = $events->getNextPageToken();		if ($pageToken) {			$optParams = array('pageToken' => $pageToken);			$events = $service->events->listEvents('primary', $optParams);		} else {			break;		}	}		return $entries;	ini_set("include_path", $org_inc_path);}?>